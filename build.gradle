buildscript {
	dependencies {
		classpath fileTree(dir: "lib", include: "*.jar")
	}
}

plugins {
	id "java-library"
	id "maven-publish"
}

group = "com.danawa.search"
version = "1.2.0"

sourceCompatibility = JavaVersion.VERSION_14
targetCompatibility = JavaVersion.VERSION_14
compileJava {
	options.encoding = "UTF-8"
	options.incremental = true
	options.fork = true
	options.failOnError = false
}
compileTestJava.options.encoding = "UTF-8"

repositories {
	mavenCentral()
	mavenLocal()
}

sourceSets {
	main {
		java {
			srcDir "src/main/java"
			exclude "Tester.java"
		}
		resources {
			srcDir "src/main/resources"
			exclude "**/**"
		}
	}
	test {
		java {
			srcDir "src/test/java"
		}
	}
}

dependencies {
	testImplementation (
		[group: "junit", name: "junit", version: "4.1+", transitive: true]
	)
	implementation (
		[group: "commons-io", name: "commons-io", version: "1.3.2"],
		[group: "org.elasticsearch", name: "elasticsearch", version: "7.8.1"],
		[group: "org.apache.logging.log4j", name: "log4j-core", version: "2.11.1"],
		[group: "org.json", name: "json", version: "2019+"],
	)
}

task copyToDependencies(type: Copy) {
	from (configurations.runtimeClasspath) {
		include "json-*", "slf4j-api*"
	}
	from ("src/main/resources") {
		include "*.properties"
		include "*.policy"
		include "*.yml"
	}
	into "${buildDir}/libs"
}

task copyJars(type: Copy) {
	dependsOn(jar)
	dependsOn(copyToDependencies)
	from (configurations.runtimeClasspath) {
		include "*.jar"
	}
	from(jar.archivePath) {
		include "*.jar"
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	into "${buildDir}/jars"
}

build {   
	System.out.println("BUILDING..")
}

/**
 * gradle 커맨드에서 다음과 같이 테스트 실행 가능
 * ./gradlew --no-daemon test --tests -DLOG_LEVEL=TRACE -DSYSPROP_LAUNCH_FOR_BUILD=false ProductNameAnalysisFilterTest.testFilter
 **/
test {
	String launchForBuild = System.getProperty("SYSPROP_LAUNCH_FOR_BUILD")
	String dictSetting = System.getProperty("SYSPROP_TEST_DICTIONARY_SETTING")
	String logLevel = System.getProperty("LOG_LEVEL")
	if ("false".equals(launchForBuild)) {
		systemProperty "SYSPROP_LAUNCH_FOR_BUILD", "false"
		testLogging.showStandardStreams = true
	} else {
		systemProperty "SYSPROP_LAUNCH_FOR_BUILD", "true"
	}
	if (dictSetting == null || "".equals(dictSetting)) {
		systemProperty "SYSPROP_TEST_DICTIONARY_SETTING", "INTERNAL"
	} else {
		systemProperty "SYSPROP_TEST_DICTIONARY_SETTING", dictSetting
	}
	if (logLevel == null || "".equals(logLevel)) {
		systemProperty "LOG_LEVEL", System.getProperty("DEBUG")
	} else {
		systemProperty "LOG_LEVEL", logLevel
	}
	systemProperty "SYSPROP_TEST_DICTIONARY_LOAD_EXTRA", System.getProperty("SYSPROP_TEST_DICTIONARY_LOAD_EXTRA")
	systemProperty "SYSPROP_SAMPLE_TEXT_PATH", System.getProperty("SYSPROP_SAMPLE_TEXT_PATH")
	systemProperty "log4j.configurationFile", System.getProperty("log4j.configurationFile")
	systemProperty "file.encoding", "UTF-8"
    dependsOn cleanTest
}

build.dependsOn(copyToDependencies, copyJars)